openapi: 3.0.3
info:
  title: Sabora API
  description: API para gestionar usuarios y sus degustaciones sensoriales.
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /form/{id}/answer:
    post:
      tags:
        - AnswerForm
      summary: Enviar respuesta a un formulario
      description: |
        Este endpoint permite a un usuario enviar sus respuestas a un formulario específico.
      operationId: answerForm
      parameters:
        - name: id
          in: path
          required: true
          description: ID del formulario al que se envían las respuestas.
          schema:
            type: string
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormAnswerDTO'
      responses:
        '200':
          description: Respuestas enviadas correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '400':
          description: Datos inválidos en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /form/{id}/answers:
    get:
      tags:
        - AnswerForm
      summary: Obtener respuestas de un formulario
      description: |
        Este endpoint permite obtener todas las respuestas enviadas a un formulario específico.
      operationId: getFormAnswers
      parameters:
        - name: id
          in: path
          required: true
          description: ID del formulario cuyas respuestas se desean obtener.
          schema:
            type: string
            example: "123"
      responses:
        '200':
          description: Respuestas obtenidas correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /form/{id}/question/{questionId}/answers:
    get:
      tags:
        - AnswerForm
      summary: Obtener respuestas a una pregunta específica de un formulario
      description: |
        Este endpoint permite obtener todas las respuestas enviadas a una pregunta específica de un formulario.
      operationId: getAnswersToAQuestion
      parameters:
        - name: id
          in: path
          required: true
          description: ID del formulario cuyas respuestas se desean obtener.
          schema:
            type: string
            example: "123"
        - name: questionId
          in: path
          required: true
          description: ID de la pregunta cuyas respuestas se desean obtener.
          schema:
            type: integer
            format: int32
            example: 15
      responses:
        '200':
          description: Respuestas obtenidas correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerDTO'
        '404':
          description: Formulario o pregunta no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /connection:
    post:
      tags:
        - Connection
      summary: Registrar una nueva conexión.
      description: |
        Este endpoint registra una conexión de un dispositivo o usuario con una experiencia determinada.
      operationId: connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionObjectDTO'
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleMessageDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      tags:
        - Connection
      summary: Elimina conexión
      description: |
        Este endpoint registra una conexión de un dispositivo o usuario con una experiencia determinada.
      operationId: removeConnection
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /all-connections:
    get:
      tags:
        - Connection
      description: Get all active VR Glasses connections
      summary: Lista todas las conexiones
      operationId: getConnections
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionParamsDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /connections:
    get:
      tags:
        - Connection
      description: Get all active VR Glasses connections
      summary: Lista todas las conexiones locales
      operationId: getLocalConnections
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionParamsDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /experience/start:
    post:
      tags:
        - Experience
      description: Create a new experience
      summary: Create a new experience
      operationId: startExperience
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceDTO'
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /experience/end:
    put:
      tags:
        - Experience
      description: End a experience
      summary: End a new experience
      operationId: endExperience
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceDTO'
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /experience/unfinished/:
    get:
      tags:
        - Experience
      description: End a experience
      summary: End a new experience
      operationId: getUnfinishedExperiences
      parameters:
        - name: client
          in: query
          required: true
          description: ID del formulario cuyas respuestas se desean obtener.
          schema:
            type: string
            example: "123"
      responses:
        '200':
          description: Conexión registrada correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExperienceDTO'
        '404':
          description: Formulario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /upload:
    post:
      tags:
        - File
      summary: Subir un archivo
      description: Permite subir un archivo al servidor mediante multipart/form-data.
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Archivo a subir.
      responses:
        '200':
          description: Archivo subido correctamente.
          content:
            text/plain:
              schema:
                type: string
                example: "Archivo subido con éxito."
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /delete:
    delete:
      tags:
        - File
      summary: Eliminar un archivo
      description: Permite eliminar un archivo especificando su nombre.
      operationId: deleteFile
      parameters:
        - name: fileName
          in: query
          required: true
          description: Nombre del archivo a eliminar.
          schema:
            type: string
            example: "documento.pdf"
      responses:
        '200':
          description: Archivo eliminado correctamente.
          content:
            text/plain:
              schema:
                type: string
                example: "Archivo eliminado con éxito."
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '404':
          description: Archivo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /resources/{fileName}:
    get:
      tags:
        - File
      summary: Descargar un archivo
      description: Descarga el archivo especificado por nombre.
      operationId: downloadFile
      parameters:
        - name: fileName
          in: path
          required: true
          description: Nombre del archivo a descargar.
          schema:
            type: string
            example: "documento.pdf"
      responses:
        '200':
          description: Archivo descargado correctamente.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Archivo no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /food:
    get:
      summary: Obtener alimento por nombre
      operationId: getFood
      tags:
        - Food
      parameters:
        - name: name
          in: query
          required: true
          description: Nombre del alimento a buscar
          schema:
            type: string
            example: "Yogurt"
      responses:
        '200':
          description: Alimento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodDTO'
        '404':
          description: Alimento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    post:
      summary: Crear un nuevo alimento
      operationId: postFood
      tags:
        - Food
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodDTO'
      responses:
        '201':
          description: Alimento creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /foods:
    get:
      summary: Obtener todos los alimentos
      operationId: getAllFoods
      tags:
        - Food
      responses:
        '200':
          description: Lista de alimentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodDTO'
  /form/all:
    get:
      summary: Obtener todos los formularios
      operationId: getForm
      tags:
        - Form
      responses:
        '200':
          description: Lista de formularios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormDTO'
        '204':
          description: No hay formularios

  /form/{id}:
    get:
      summary: Obtener formulario por ID
      tags:
        - Form
      operationId: getFormById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del formulario
      responses:
        '200':
          description: Formulario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDTO'
        '404':
          description: Formulario no encontrado

    delete:
      summary: Eliminar formulario por ID
      tags:
        - Form
      operationId: deleteForm
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID del formulario a eliminar
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '404':
          description: Formulario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /form:
    post:
      operationId: postForm
      summary: Crear un nuevo formulario
      tags:
        - Form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDTO'
      responses:
        '200':
          description: Formulario creado correctamente
          content:
            application/json:
              schema:
                type: string
                $ref: '#/components/schemas/SimpleMessageDTO'
        '400':
          description: Datos inválidos

  /scenario:
    post:
      tags:
        - Scenario
      summary: Create a new scenario
      description: Creates a new scenario with the provided details and optional file
      operationId: createScenario
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                scenarioDTO:
                  description: The scenario object as JSON string
                  $ref: '#/components/schemas/ScenarioDTO'
                file:
                  type: string
                  format: binary
                  description: Optional file to upload with the scenario
      responses:
        '201':
          description: Scenario created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioDTO'
        '400':
          description: Invalid input data
        '500':
          description: Internal server error

  /tablet/connection:
    post:
      tags:
        - Tablet Connections
      summary: Create a new tablet connection
      description: Establishes a new tablet connection with the provided details
      operationId: createTabletConnection
      requestBody:
        description: Connection object with tablet details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionObjectDTO'
      responses:
        '200':
          description: Connection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '400':
          description: Invalid input data
        '500':
          description: Internal server error

    delete:
      tags:
        - Tablet Connections
      summary: Remove a tablet connection
      description: Removes an existing tablet connection
      operationId: removeTabletConnection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionObjectDTO'
      responses:
        '200':
          description: Connection removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '404':
          description: Connection not found
        '500':
          description: Internal server error

  /tablet/all-connections:
    get:
      tags:
        - Tablet Connections
      summary: Get all connections
      description: Retrieves a list of all tablet connections
      operationId: getAllConnections
      responses:
        '200':
          description: List of all connections retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionParamsDTO'
        '500':
          description: Internal server error

  /tablet/connections:
    get:
      tags:
        - Tablet Connections
      summary: Get local connections
      description: Retrieves connections from the same remote address as the request
      operationId: getLocalTabletConnections
      responses:
        '200':
          description: Local connections retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectionParamsDTO'
        '500':
          description: Internal server error

  /user:
    post:
      operationId: register
      summary: Register a new user
      tags:
        - User
      description: Registra un nuevo usuario con los datos proporcionados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDTO'
        '400':
          description: Petición inválida (usuario ya existe o datos incorrectos)
        '500':
          description: Error interno del servidor

    get:
      summary: Get user by username and password
      operationId: getUser
      description: Obtiene un usuario verificando nombre de usuario y contraseña.
      tags:
        - User
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: Nombre de usuario
        - in: query
          name: password
          schema:
            type: string
            format: password
          required: true
          description: Contraseña del usuario
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Contraseña incorrecta
        '404':
          description: Usuario no encontrado
        '500':
          description: Error interno del servidor

components:
  schemas:
    FormAnswerDTO:
      type: object
      required:
        - formId
        - experienceId
        - userIdentifier
        - answers
      properties:
        formId:
          type: integer
          format: int32
          description: ID del formulario respondido.
          example: 101
        experienceId:
          type: integer
          format: int32
          description: ID de la experiencia en la que se realiza el formulario.
          example: 202
        userIdentifier:
          type: string
          description: Identificador del usuario que responde.
          example: "user_xyz"
        answers:
          type: array
          description: Lista de respuestas del usuario.
          items:
            $ref: '#/components/schemas/AnswerDTO'

    AnswerDTO:
      type: object
      required:
        - id
        - questionId
        - answer
      properties:
        id:
          type: integer
          format: int32
          description: ID de la respuesta (puede ser generado por el cliente).
          example: 1
        questionId:
          type: integer
          format: int32
          description: ID de la pregunta respondida.
          example: 15
        answer:
          type: string
          description: Contenido textual de la respuesta.
          example: "Chocolate"

    SimpleMessageDTO:
      type: object
      properties:
        message:
          type: string
          example: "Form answered successfully"
      required:
        - message

    ConnectionObjectDTO:
      type: object
      properties:
        name:
          type: string
          example: "nombre"
        localIp:
          type: string
          example: "127.0.0.1"

    ConnectionParamsDTO:
      type: object
      properties:
        name:
          type: string
          example: "nombre"
        localIp:
          type: string
          example: "127.0.0.1"
        remoteId:
          type: string
          example: "127.0.0.1"

    ExperienceDTO:
      type: object
      required:
        - id
        - questionId
        - answer
      properties:
        id:
          type: integer
          format: int32
          description: ID de la respuesta (puede ser generado por el cliente).
          example: 1
        time:
          type: integer
          format: int64
          description: Tiempo de
          example: 15
        client:
          type: string
          description: Contenido textual de la respuesta.
          example: "Federico"
        scenario:
          type: string
          description: Contenido textual de la respuesta.
          example: "Federico"
        sound:
          type: string
          description: Contenido textual de la respuesta.
          example: "Federico"
        food:
          type: string
          description: Contenido textual de la respuesta.
          example: "Federico"
        sounds:
          type: array
          items:
            type: string
    FoodDTO:
      type: object
      properties:
        name:
          type: string
          example: "Yogurt"
        composition:
          type: string
          example: "Leche fermentada"
        fats:
          type: number
          format: double
          example: 3.5
        carbohydrates:
          type: number
          format: double
          example: 4.7
        proteins:
          type: number
          format: double
          example: 5.2
        salt:
          type: number
          format: double
          example: 0.1
        calories:
          type: number
          format: double
          example: 59

    FormDTO:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "Encuesta de Sabor"
        foodSpecialist:
          type: string
          example: "Especialista Nutricional"
        creationDate:
          type: string
          format: date
          example: "2025-06-01"
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionDTO'

    # Abstract polymorphic QuestionDTO with discriminator 'type'
    QuestionDTO:
      type: object
      discriminator:
        propertyName: type
        mapping:
          RANGE: '#/components/schemas/RangeQuestionDTO'
          MULTIPLE_ANSWER: '#/components/schemas/MultipleAnswerQuestionDTO'
          UNIQUE_ANSWER: '#/components/schemas/UniqueAnswerQuestionDTO'
          REDACTION: '#/components/schemas/AnswerRedactionQuestionDTO'
      required:
        - id
        - question
        - type
      properties:
        id:
          type: integer
          example: 1
        question:
          type: string
          example: "¿Cuál es tu rango de edad?"
        type:
          type: string
          example: "RANGE"

    RangeQuestionDTO:
      allOf:
        - $ref: '#/components/schemas/QuestionDTO'
        - type: object
          properties:
            min:
              type: integer
              example: 18
            max:
              type: integer
              example: 65

    MultipleAnswerQuestionDTO:
      allOf:
        - $ref: '#/components/schemas/QuestionDTO'
        - type: object
          properties:
            options:
              type: array
              items:
                type: string
              example: [ "Manzana", "Banana", "Naranja" ]

    UniqueAnswerQuestionDTO:
      allOf:
        - $ref: '#/components/schemas/QuestionDTO'
        - type: object
          properties:
            options:
              type: array
              items:
                type: string
              example: [ "Sí", "No" ]

    AnswerRedactionQuestionDTO:
      allOf:
        - $ref: '#/components/schemas/QuestionDTO'
        - type: object
          properties:
            placeholder:
              type: string
              example: "Escribe tu respuesta aquí"

    ScenarioDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the scenario
          example: 1
        name:
          type: string
          description: Name of the scenario
          example: "Forest Adventure"
        place:
          type: string
          description: Location or place of the scenario
          example: "Amazon Rainforest"
        photoPath:
          type: string
          description: Path to the scenario's photo
          example: "/images/scenarios/forest.jpg"
        sound:
          type: string
          description: Sound associated with the scenario
          example: "/sounds/forest.mp3"
      required:
        - name
        - place

    UserDTO:
      type: object
      properties:
        type:
          type: string
          example: "cliente"
          description: Tipo de usuario (cliente, analista, etc.)
        dni:
          type: string
          example: "12345678A"
          description: Documento nacional de identidad
        name:
          type: string
          example: "Laura"
          description: Nombre del usuario
        apellidos:
          type: string
          example: "García Pérez"
          description: Apellidos del usuario
        email:
          type: string
          format: email
          example: "laura@example.com"
          description: Correo electrónico del usuario
        password:
          type: string
          format: password
          example: "1234Segura!"
          description: Contraseña del usuario
        telefono:
          type: integer
          format: int64
          example: 600123456
          description: Número de teléfono
        username:
          type: string
          example: "laurita"
          description: Nombre de usuario
        specificProperties:
          type: object
          additionalProperties: true
          example: { "edad": 25, "preferencias": [ "vegano", "dulce" ] }
          description: Propiedades específicas del tipo de usuario (pueden ser cualquier cosa)

    ErrorDTO:
      type: object
      properties:
        error:
          type: string
          example: "Internal server error"
